{
  "AppSettings": {
    "ExerciseCollection": {
      "Categories": [
        // Category - Strings
        {
          "Name": "strings",
          "Exercises": [
            {
              "Description": "Reverse a string",
              "Solutions": [
                {
                  "Description": "Using loop and char array.",
                  "MethodName": "ReverseAString"
                },
                {
                  "Description": "Using Array.Reverse function.",
                  "MethodName": "ReverseAStringUsingArrayReverse"
                },
                {
                  "Description": "Using LINQ IEnumerable Reverse function.",
                  "MethodName": "ReverseAStringUsingLINQ"
                }
              ]
            },
            {
              "Description": "Check if word is a palindrome (Is a word that has the same spelling from front to back and vice versa)",
              "Solutions": [
                {
                  "Description": "Using a loop.",
                  "MethodName": "StringIsPalindrome"
                },
                {
                  "Description": "Using LINQ IEnumerable SequenceEqual and Reverse functions.",
                  "MethodName": "StringIsPalindromeUsingLINQ"
                }
              ]
            },
            {
              "Description": "Reverse the order of words in a given string.",
              "Solutions": [
                {
                  "Description": "Using a loop and StringBuilder to append.",
                  "MethodName": "ReverseOrderOfWordsInSentence"
                },
                {
                  "Description": "Using Split and StringBuilder Append functions.",
                  "MethodName": "ReverseOrderOfWordsInSentenceUsingSplitAndStringBuilder"
                }
              ]
            },
            {
              "Description": "Reverse each word individually without changing its position in the sentence.",
              "Solutions": [
                {
                  "Description": "Using a loops, temporary char type list and StringBuilder to append.",
                  "MethodName": "ReverseEachWordInAString"
                },
                {
                  "Description": "Using Split and StringBuilder Append functions.",
                  "MethodName": "ReverseEachWordInAStringUsingSplitAndStringBuilder"
                }
              ]
            },
            {
              "Description": "Find the count of each character (occurence) in a string",
              "Solutions": [
                {
                  "Description": "Using a loop and Dictionary to store characters and their occurence counter",
                  "MethodName": "CharacterOccurrencesInString"
                },
                {
                  "Description": "Utilizing LINQ functionalities",
                  "MethodName": "CharacterOccurrencesInStringUsingLINQ"
                },
                {
                  "Description": "Using a placeholder list of chars",
                  "MethodName": "CharacterOccurrencesInStringUsingASeparatePlaceholderList"
                }
              ]
            },
            {
              "Description": "Remove duplicate character values from the input string",
              "Solutions": [
                {
                  "Description": "Using a loop, and string Contains function",
                  "MethodName": "RemoveDuplicateCharactersFromString"
                },
                {
                  "Description": "Using a HashSet to store non-duplicate characters values",
                  "MethodName": "RemoveDuplicateCharactersFromStringUsingHashSet"
                },
                {
                  "Description": "Using LINQ DistinctBy and string Join function to solve the exercise with a one-liner",
                  "MethodName": "RemoveDuplicateCharactersFromStringLINQ"
                }
              ]
            },
            {
              "Description": "Find all the substrings present in a given string",
              "Solutions": [
                {
                  "Description": "Using loops and string Substring function",
                  "MethodName": "FindAllSubstringsFromString"
                },
                {
                  "Description": "Using loops and StringBuilder to continually Append and form a new string",
                  "MethodName": "FindAllSubstringsFromStringUsingStringBuilder"
                }
              ]
            },
            {
              "Description": "Determine whether two or more words are anagrams of each other",
              "Solutions": [
                {
                  "Description": "Create frequency dictionary for each word, and do key/value comparison. (More complex solution)",
                  "MethodName": "CheckIfWordsAreAnagramsOfEachOther"
                },
                {
                  "Description": "Using LINQ OrderBy and SequenceEqual functions. (Very simple solution)",
                  "MethodName": "CheckIfWordsAreAnagramsOfEachOtherUsingLINQ"
                }
              ]
            },
            {
              "Description": "Find the longest common ending between all provided input strings",
              "Solutions": [
                {
                  "Description": "Create ending length dictionary for each word, and do key/value comparison.",
                  "MethodName": "FindLongestCommonEndingAmongStrings"
                }
              ]
            },
            {
              "Description": "Check if all strings contain only unique characters",
              "Solutions": [
                {
                  "Description": "Using a dictionary, and multiple loops.",
                  "MethodName": "CheckIfStringsHaveAllUniqueCharacters"
                },
                {
                  "Description": "Using a list and utilizing HashSet functionality",
                  "MethodName": "CheckIfStringsHaveAllUniqueCharactersUsingHashSet"
                }
              ]
            },
            {
              "Description": "Find the length of the longest substring without repeating characters from provided input string",
              "Solutions": [
                {
                  "Description": "Using multiple loops, and forming individual substrings",
                  "MethodName": "FindLongestSubstringWithoutRepeatingCharacters"
                },
                {
                  "Description": "Utilize a dictionary, loops and most importantly - one of previous exercise's logic to get all possible substrings",
                  "MethodName": "FindLongestSubstringWithoutRepeatingCharactersByParsingAllPossibleSubstrings"
                }
              ]
            },
            {
              "Description": "Compress input string to a smaller byte count without using compression specific classes",
              "Solutions": [
                {
                  "Description": "Using a loop and forming a new, compressed string",
                  "MethodName": "BasicStringCompression"
                }
              ]
            }
          ]
        },
        // Category - Numbers
        {
          "Name": "numbers",
          "Exercises": [
            {
              "Description": "Check if number is a prime number or not?",
              "Solutions": [
                {
                  "Description": "Using loop and remainder operator",
                  "MethodName": "CheckIfNumberIsPrime"
                }
              ]
            },
            {
              "Description": "Find the sum of digits of a positive integer",
              "Solutions": [
                {
                  "Description": "Using loop, remainder operator (Arithmetic solution)",
                  "MethodName": "FindSumOfDigitsOfAPositiveNumber"
                },
                {
                  "Description": "Using a loop and iterating over each digit",
                  "MethodName": "FindSumOfDigitsOfAPositiveNumberTEST"
                },
                {
                  "Description": "Using LINQ to solve exercise in a one-liner",
                  "MethodName": "FindSumOfDigitsOfAPositiveNumberUsingLINQ"
                }
              ]
            },
            {
              "Description": "Calculate the factorial value of a non-negative integer number",
              "Solutions": [
                {
                  "Description": "Using a for loop",
                  "MethodName": "FindFactorialOfAPositiveNumber"
                },
                {
                  "Description": "Using recursion",
                  "MethodName": "FindFactorialOfAPositiveNumberUsingRecursion"
                },
                {
                  "Description": "Using a while loop",
                  "MethodName": "FindFactorialOfAPositiveNumberUsingWhileLoop"
                }
              ]
            },
            {
              "Description": "Calculating and displaying Fibonacci sequence for a given number of elements",
              "Solutions": [
                {
                  "Description": "Using a loop",
                  "MethodName": "FibonacciSeriesCalculationAndDisplay"
                },
                {
                  "Description": "Using recursion",
                  "MethodName": "FibonacciSeriesCalculationAndDisplayUsingRecursion"
                }
              ]
            },
            {
              "Description": "Checking whether provided input number is an Armstrong number or not",
              "Solutions": [
                {
                  "Description": "Using a loop and iterating over every element of the input number",
                  "MethodName": "CheckIfNumberIsArmstrong"
                },
                {
                  "Description": "Using a loop, and a remainder operator",
                  "MethodName": "CheckIfNumberIsArmstrongUsingRemainder"
                }
              ]
            },
            {
              "Description": "Checking whether provided input number is a Palindrome number or not",
              "Solutions": [
                {
                  "Description": "Interpreting the number as a string and comparing variables in a loop",
                  "MethodName": "NumberIsPalindrome"
                },
                {
                  "Description": "Using remainder operator and placeholder variable",
                  "MethodName": "NumberIsPalindromeUsingRemaider"
                }
              ]
            },
            {
              "Description": "Find the angle between the hour and minute arrows positioned on a clock",
              "Solutions": [
                {
                  "Description": "Calculating the angle of hour and minute arrows, and using Math.Abs function",
                  "MethodName": "FindAngleBetweenClockArrows"
                }
              ]
            },
            {
              "Description": "Find and display all factors of a given input number",
              "Solutions": [
                {
                  "Description": "Using a loop, and a remainder operator",
                  "MethodName": "FindFactorsOfANumber"
                }
              ]
            },
            {
              "Description": "Playing out the FizzBuzz word game, and displaying results",
              "Solutions": [
                {
                  "Description": "Using a loop, and a remainder operator to determine what needs to be displayed",
                  "MethodName": "FizzBuzzWordGame"
                }
              ]
            }
          ]
        }
      ]
    },
    "HelpCommandCollection": {
      "HelpCommands": [
        {
          "Name": "help",
          "Description": "Lists available helper commands that can be invoked."
        },
        {
          "Name": "how",
          "Description": "Provides an explanation how to form a command to invoke exercise solution."
        },
        {
          "Name": "list",
          "Description": "Displays a complete list of all categories, with all exercises and their solutions."
        },
        {
          "Name": "quit",
          "Description": "Exits the application."
        },
        {
          "Name": "clear",
          "Description": "Clears the console."
        }
      ]
    }
  }
}