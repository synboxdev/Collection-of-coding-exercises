{
  "AppSettings": {
    "ExerciseCollection": {
      "Categories": [
        // Category - Strings
        {
          "Name": "strings",
          "Exercises": [
            {
              "Description": "Reverse a string",
              "Solutions": [
                {
                  "Description": "Using loop and char array.",
                  "MethodName": "ReverseAString"
                },
                {
                  "Description": "Using Array.Reverse function.",
                  "MethodName": "ReverseAStringUsingArrayReverse"
                },
                {
                  "Description": "Using LINQ IEnumerable Reverse function.",
                  "MethodName": "ReverseAStringUsingLINQ"
                }
              ]
            },
            {
              "Description": "Check if word is a palindrome (Is a word that has the same spelling from front to back and vice versa)",
              "Solutions": [
                {
                  "Description": "Using a loop.",
                  "MethodName": "StringIsPalindrome"
                },
                {
                  "Description": "Using LINQ IEnumerable SequenceEqual and Reverse functions.",
                  "MethodName": "StringIsPalindromeUsingLINQ"
                }
              ]
            },
            {
              "Description": "Reverse the order of words in a given string.",
              "Solutions": [
                {
                  "Description": "Using a loop and StringBuilder to append.",
                  "MethodName": "ReverseOrderOfWordsInSentence"
                },
                {
                  "Description": "Using Split and StringBuilder Append functions.",
                  "MethodName": "ReverseOrderOfWordsInSentenceUsingSplitAndStringBuilder"
                }
              ]
            },
            {
              "Description": "Reverse each word individually without changing its position in the sentence.",
              "Solutions": [
                {
                  "Description": "Using a loops, temporary char type list and StringBuilder to append.",
                  "MethodName": "ReverseEachWordInAString"
                },
                {
                  "Description": "Using Split and StringBuilder Append functions.",
                  "MethodName": "ReverseEachWordInAStringUsingSplitAndStringBuilder"
                }
              ]
            },
            {
              "Description": "Find the count of each character (occurence) in a string",
              "Solutions": [
                {
                  "Description": "Using a loop and Dictionary to store characters and their occurence counter",
                  "MethodName": "CharacterOccurrencesInString"
                },
                {
                  "Description": "Utilizing LINQ functionalities",
                  "MethodName": "CharacterOccurrencesInStringUsingLINQ"
                },
                {
                  "Description": "Using a placeholder list of chars",
                  "MethodName": "CharacterOccurrencesInStringUsingASeparatePlaceholderList"
                }
              ]
            },
            {
              "Description": "Remove duplicate character values from the input string",
              "Solutions": [
                {
                  "Description": "Using a loop, and string Contains function",
                  "MethodName": "RemoveDuplicateCharactersFromString"
                },
                {
                  "Description": "Using a HashSet to store non-duplicate characters values",
                  "MethodName": "RemoveDuplicateCharactersFromStringUsingHashSet"
                },
                {
                  "Description": "Using LINQ DistinctBy and string Join function to solve the exercise with a one-liner",
                  "MethodName": "RemoveDuplicateCharactersFromStringLINQ"
                }
              ]
            },
            {
              "Description": "Find all the substrings present in a given string",
              "Solutions": [
                {
                  "Description": "Using loops and string Substring function",
                  "MethodName": "FindAllSubstringsFromString"
                },
                {
                  "Description": "Using loops and StringBuilder to continually Append and form a new string",
                  "MethodName": "FindAllSubstringsFromStringUsingStringBuilder"
                }
              ]
            },
            {
              "Description": "Determine whether two or more words are anagrams of each other",
              "Solutions": [
                {
                  "Description": "Create frequency dictionary for each word, and do key/value comparison. (More complex solution)",
                  "MethodName": "CheckIfWordsAreAnagramsOfEachOther"
                },
                {
                  "Description": "Using LINQ OrderBy and SequenceEqual functions. (Very simple solution)",
                  "MethodName": "CheckIfWordsAreAnagramsOfEachOtherUsingLINQ"
                }
              ]
            },
            {
              "Description": "Find the longest common ending between all provided input strings",
              "Solutions": [
                {
                  "Description": "Create ending length dictionary for each word, and do key/value comparison.",
                  "MethodName": "FindLongestCommonEndingAmongStrings"
                }
              ]
            },
            {
              "Description": "Check if all strings contain only unique characters",
              "Solutions": [
                {
                  "Description": "Using a dictionary, and multiple loops.",
                  "MethodName": "CheckIfStringsHaveAllUniqueCharacters"
                },
                {
                  "Description": "Using a list and utilizing HashSet functionality",
                  "MethodName": "CheckIfStringsHaveAllUniqueCharactersUsingHashSet"
                }
              ]
            },
            {
              "Description": "Find the length of the longest substring without repeating characters from provided input string",
              "Solutions": [
                {
                  "Description": "Using multiple loops, and forming individual substrings",
                  "MethodName": "FindLongestSubstringWithoutRepeatingCharacters"
                },
                {
                  "Description": "Utilize a dictionary, loops and most importantly - one of previous exercise's logic to get all possible substrings",
                  "MethodName": "FindLongestSubstringWithoutRepeatingCharactersByParsingAllPossibleSubstrings"
                }
              ]
            },
            {
              "Description": "Compress input string to a smaller byte count without using compression specific classes",
              "Solutions": [
                {
                  "Description": "Using a loop and forming a new, compressed string",
                  "MethodName": "BasicStringCompression"
                }
              ]
            },
            {
              "Description": "Find and return the N'th word of Fibonacci sequence",
              "Solutions": [
                {
                  "Description": "Using a loop and populating a string type list with all Fibonacci words",
                  "MethodName": "FibonacciWord"
                }
              ]
            },
            {
              "Description": "Create 'True alphabetical order' function for a given string",
              "Solutions": [
                {
                  "Description": "Creating a list of whitespace indexes, and then re-inserting whitespaces into correct indexes, after reordering the original string",
                  "MethodName": "TrueAlphabeticalOrder"
                }
              ]
            },
            {
              "Description": "Determine whether a given sentence is 'smooth' or not? (Every word starts with the same letter as the last character of previous word)",
              "Solutions": [
                {
                  "Description": "Splitting the string into string array for each word, and using String class functions for comparison",
                  "MethodName": "IsSentenceSmooth"
                }
              ]
            },
            {
              "Description": "Find the longest Abecedarian word, from a given list of strings",
              "Solutions": [
                {
                  "Description": "Iterate over every word in a given array of words, check whether it fits condition to be an Abecedarian word and is longer than current longest Abecedarian word",
                  "MethodName": "FindLongestAbecedarianWord"
                }
              ]
            },
            {
              "Description": "Determine whether a given string, contains an Additive number sequence or not",
              "Solutions": [
                {
                  "Description": "Extracting first two numbers of the sequence from the input string, calculating and forming the expected sequence until its length is equivalent or exceeds input string, then - comparing the two sequences.",
                  "MethodName": "CheckIfStringContainsAdditiveNumberSequence"
                }
              ]
            },
            {
              "Description": "Play out 'Growing and Shrinking potions' game",
              "Solutions": [
                {
                  "Description": "Forming a list of KeyValuePairs when traversing the input string, and then forming final string by applying game's rule-set",
                  "MethodName": "GrowingAndShrinkingPotions"
                },
                {
                  "Description": "Utilizing a single for loop, temporary variable to hold numeric section and immediately forming the final string (game's result)",
                  "MethodName": "GrowingAndShrinkingPotionsSimplified"
                }
              ]
            },
            {
              "Description": "Given two or more string sentences, determine whether they are so called 'shadows' of each other",
              "Solutions": [
                {
                  "Description": "Utilizing for loops, HashSet and LINQ functions",
                  "MethodName": "CheckIfStringsContainShadowSentences"
                }
              ]
            },
            {
              "Description": "Replace every N'th instance of a given character in a given string",
              "Solutions": [
                {
                  "Description": "Using an occurrence counter and StringBuilder to replace a given character with a new value",
                  "MethodName": "ReplaceEveryNthInstanceOfACharacter"
                }
              ]
            },
            {
              "Description": "Find the very first element that has recurred in a given string",
              "Solutions": [
                {
                  "Description": "Forming a dictionary to save first occurrence of a given characters, a for loop, and a handled exception to catch recurrence of any element from the dictionary",
                  "MethodName": "FindFirstRecurrenceIndex"
                }
              ]
            }
          ]
        },
        // Category - Numbers
        {
          "Name": "numbers",
          "Exercises": [
            {
              "Description": "Check if number is a prime number or not?",
              "Solutions": [
                {
                  "Description": "Using loop and remainder operator",
                  "MethodName": "CheckIfNumberIsPrime"
                }
              ]
            },
            {
              "Description": "Find the sum of digits of a positive integer",
              "Solutions": [
                {
                  "Description": "Using loop, remainder operator (Arithmetic solution)",
                  "MethodName": "FindSumOfDigitsOfAPositiveNumber"
                },
                {
                  "Description": "Using a loop and iterating over each digit",
                  "MethodName": "FindSumOfDigitsOfAPositiveNumberTEST"
                },
                {
                  "Description": "Using LINQ to solve exercise in a one-liner",
                  "MethodName": "FindSumOfDigitsOfAPositiveNumberUsingLINQ"
                }
              ]
            },
            {
              "Description": "Calculate the factorial value of a non-negative integer number",
              "Solutions": [
                {
                  "Description": "Using a for loop",
                  "MethodName": "FindFactorialOfAPositiveNumber"
                },
                {
                  "Description": "Using recursion",
                  "MethodName": "FindFactorialOfAPositiveNumberUsingRecursion"
                },
                {
                  "Description": "Using a while loop",
                  "MethodName": "FindFactorialOfAPositiveNumberUsingWhileLoop"
                }
              ]
            },
            {
              "Description": "Calculating and displaying Fibonacci sequence for a given number of elements",
              "Solutions": [
                {
                  "Description": "Using a loop",
                  "MethodName": "FibonacciSeriesCalculationAndDisplay"
                },
                {
                  "Description": "Using recursion",
                  "MethodName": "FibonacciSeriesCalculationAndDisplayUsingRecursion"
                }
              ]
            },
            {
              "Description": "Checking whether provided input number is an Armstrong number or not",
              "Solutions": [
                {
                  "Description": "Using a loop and iterating over every element of the input number",
                  "MethodName": "CheckIfNumberIsArmstrong"
                },
                {
                  "Description": "Using a loop, and a remainder operator",
                  "MethodName": "CheckIfNumberIsArmstrongUsingRemainder"
                }
              ]
            },
            {
              "Description": "Checking whether provided input number is a Palindrome number or not",
              "Solutions": [
                {
                  "Description": "Interpreting the number as a string and comparing variables in a loop",
                  "MethodName": "NumberIsPalindrome"
                },
                {
                  "Description": "Using remainder operator and placeholder variable",
                  "MethodName": "NumberIsPalindromeUsingRemaider"
                }
              ]
            },
            {
              "Description": "Find the angle between the hour and minute arrows positioned on a clock",
              "Solutions": [
                {
                  "Description": "Calculating the angle of hour and minute arrows, and using Math.Abs function",
                  "MethodName": "FindAngleBetweenClockArrows"
                }
              ]
            },
            {
              "Description": "Find and display all factors of a given input number",
              "Solutions": [
                {
                  "Description": "Using a loop, and a remainder operator",
                  "MethodName": "FindFactorsOfANumber"
                }
              ]
            },
            {
              "Description": "Playing out the FizzBuzz word game, and displaying results",
              "Solutions": [
                {
                  "Description": "Using a loop, and a remainder operator to determine what needs to be displayed",
                  "MethodName": "FizzBuzzWordGame"
                }
              ]
            },
            {
              "Description": "Determine and display primal strength of a given prime number",
              "Solutions": [
                {
                  "Description": "Finding closest previous and closest next primes, calculating distance to both, and returning the results",
                  "MethodName": "PrimeNumberStrength"
                }
              ]
            },
            {
              "Description": "Find and display N'th element of the Ulam Sequence",
              "Solutions": [
                {
                  "Description": "Populates an N'th size array with Ulam Sequence elements and returns N'th element of that array.'",
                  "MethodName": "FindNthElementOfUlamSequence"
                }
              ]
            },
            {
              "Description": "Find number of steps required for a positive integer to reach 1, following Collatz conjecture.",
              "Solutions": [
                {
                  "Description": "Using a while loop and calculating value until we reach 1, whilst counting each step.",
                  "MethodName": "CollatzConjectureProblem"
                }
              ]
            },
            {
              "Description": "Check whether a given positive integer number is Harshad number, Moran number or neither",
              "Solutions": [
                {
                  "Description": "Utilizing loops, remainder operator and conditional statements",
                  "MethodName": "IsNumberHarshadOrMoran"
                }
              ]
            },
            {
              "Description": "Check whether a given number has a breakpoint (if it can be split in a way where digits on either side sum to same number)",
              "Solutions": [
                {
                  "Description": "Using a loop, Substring function and LINQ Select and Sum functions",
                  "MethodName": "CheckIfNumberHasABreakpoint"
                }
              ]
            },
            {
              "Description": "Find the n'th iteration's value of Look-and-say sequence",
              "Solutions": [
                {
                  "Description": "Using loops, and forming next element of the sequence based on previous element's numeric values.",
                  "MethodName": "LookAndSaySequence"
                }
              ]
            },
            {
              "Description": "Solve Kaprekar's Constant Problem",
              "Solutions": [
                {
                  "Description": "Using a while loop, and following Kaprekar's routine's steps to solve the problem",
                  "MethodName": "KaprekarsConstantProblem"
                }
              ]
            },
            {
              "Description": "Determine whether a given number is Disarium number or not",
              "Solutions": [
                {
                  "Description": "Forming a dictionary for number's digit values and their positions, and calculating sum based on Disarium number rules",
                  "MethodName": "CheckIfNumberIsDisarium"
                }
              ]
            },
            {
              "Description": "N-bonacci Number sequence (Calculate and display X numbers of Fibonacci sequence, by Y number of previous terms)",
              "Solutions": [
                {
                  "Description": "Initializing first few values of the sequence, and then forming the remaining values by utilizing LINQ's TakeLast and Sum functions'",
                  "MethodName": "NBonacciNumberSequenceCalculationAndDisplay"
                }
              ]
            },
            {
              "Description": "Determine whether a given number is a Gapful number or not",
              "Solutions": [
                {
                  "Description": "Retrieving first and last digits number and utilizing a remainder operator",
                  "MethodName": "CheckIfNumberIsGapful"
                }
              ]
            },
            {
              "Description": "Determine whether a given number is a Alternating or not",
              "Solutions": [
                {
                  "Description": "Create an array of digits, iterate over all of them, check current and the next for Alternating condition",
                  "MethodName": "CheckIfNumberIsAlternating"
                }
              ]
            },
            {
              "Description": "Find number of steps required for a given number to reach a single digit, whilst following Number persistence pattern",
              "Solutions": [
                {
                  "Description": "Re-forming a list of integers with each iteration after applying appropriate number persistence rules",
                  "MethodName": "NumberPersistenceProblem"
                }
              ]
            },
            {
              "Description": "Determine whether a given input number is a Pronic number or not",
              "Solutions": [
                {
                  "Description": "Utilizing a for loop and Math square root calculation function, to find the answer to the exercise",
                  "MethodName": "CheckIfNumberIsPronic"
                }
              ]
            },
            {
              "Description": "Determine whether a given input number is a Pandigital number or not",
              "Solutions": [
                {
                  "Description": "Utilizing an integer HashSet and evaluating its length after all digits of a given number have been processed",
                  "MethodName": "CheckIfNumberIsPandigital"
                },
                {
                  "Description": "Utilizing LINQ functions Distinct and Count",
                  "MethodName": "CheckIfNumberIsPandigitalUsingLINQ"
                }
              ]
            },
            {
              "Description": "Determine whether a given input number is a Slidey number or not",
              "Solutions": [
                {
                  "Description": "Utilizing a single for loop and Math library's Absolute function",
                  "MethodName": "CheckIfNumberIsSlidey"
                }
              ]
            },
            {
              "Description": "Play out 'Digits Battle' game and display the end result",
              "Solutions": [
                {
                  "Description": "Converting input number to array of digits, splitting into pairs of digits, and forming final number by processing each digit pair by game's rules",
                  "MethodName": "DigitsBattle"
                }
              ]
            },
            {
              "Description": "Determine whether a given input number is a Zygodrome number or not",
              "Solutions": [
                {
                  "Description": "Utilizing a single for loop, occurrence counter and placeholder digit variables.",
                  "MethodName": "CheckIfNumberIsZygodrome"
                }
              ]
            },
            {
              "Description": "Determine whether a given input number is a Polydivisible number or not",
              "Solutions": [
                {
                  "Description": "Utilizing single for loop, Substring function and remainder operator",
                  "MethodName": "CheckIfNumberIsPolydivisible"
                }
              ]
            },
            {
              "Description": "Solve 'Super-d Numbers' exercise (Explanation and premise provided in the summary of the method)",
              "Solutions": [
                {
                  "Description": "Utilize multiple for loops, occurrence counter, and continuously check for exercise's validation'",
                  "MethodName": "SuperdNumber"
                }
              ]
            },
            {
              "Description": "Determine whether a given number is a 'Happy' number or not",
              "Solutions": [
                {
                  "Description": "Utilizing Dictionary to hold unique numbers, and processing each number until the solution is found, by leveraging Dictionary Key uniqueness property",
                  "MethodName": "CheckIfNumberIsHappy"
                }
              ]
            },
            {
              "Description": "Determine whether a given number is a 'Unprimeable' number or not",
              "Solutions": [
                {
                  "Description": "Utilizing two for loops, converting number to char array of digits, and continously swapping out individual digits",
                  "MethodName": "CheckIfNumberIsUnprimeable"
                }
              ]
            },
            {
              "Description": "Determine whether a given positive integer is 'Good', 'Bad' or 'Neutral'",
              "Solutions": [
                {
                  "Description": "Utilizing conversion function to get binary representation of the input number, counting number of 1's and determining the output",
                  "MethodName": "GoodEvilOrNeutralNumber"
                }
              ]
            },
            {
              "Description": "Determine whether a given positive integer is an 'Apocalyptic' number or not",
              "Solutions": [
                {
                  "Description": "Utilizing Math Pow function, string formatting specifier as well as string's IndexOf function",
                  "MethodName": "CheckIfNumberIsApocalyptic"
                }
              ]
            },
            {
              "Description": "Hole number sequence",
              "Solutions": [
                {
                  "Description": "Utilizing a for loop, pattern matching evaluation and LINQ Count function",
                  "MethodName": "HoleNumberSequenceSum"
                }
              ]
            },
            {
              "Description": "Determine whether a given positive integer is a 'Truncatable' prime number or not",
              "Solutions": [
                {
                  "Description": "Utilizing two for loops to get as permutations of left and right numbers and checking whether they are prime",
                  "MethodName": "CheckIfNumberIsTruncatablePrime"
                }
              ]
            }
          ]
        },
        // Category - Arrays
        {
          "Name": "arrays",
          "Exercises": [
            {
              "Description": "Rotate an array",
              "Solutions": [
                {
                  "Description": "Using loops, and Tuple feature",
                  "MethodName": "RotateArray"
                },
                {
                  "Description": "Using loops, and placeholder variable",
                  "MethodName": "RotateArrayUsingPlaceholderVariable"
                },
                {
                  "Description": "Using loops during which a new, rotated array is formed.",
                  "MethodName": "RotateArrayRightGivenAPivotUsingLoops"
                },
                {
                  "Description": "Utilizing LINQ functions Skip, Concat and Take",
                  "MethodName": "RotateArrayRightGivenAPivotUsingLINQ"
                }
              ]
            },
            {
              "Description": "Convert a 2D (Two dimensional) array into a 1D (One dimensional) array",
              "Solutions": [
                {
                  "Description": "Using loops, and creating a new, one dimensional array (Row wise)",
                  "MethodName": "Convert2DArrayInto1DArrayRowWise"
                },
                {
                  "Description": "Using loops, and creating a new, one dimensional array (Column wise)",
                  "MethodName": "Convert2DArrayInto1DArrayColumnWise"
                }
              ]
            },
            {
              "Description": "Convert a 1D (One dimensional) array into a 2D (Two dimensional) array",
              "Solutions": [
                {
                  "Description": "Using loops, and creating a new, two dimensional array (Row wise)",
                  "MethodName": "Convert1DArrayInto2DArrayRowWise"
                },
                {
                  "Description": "Using loops, and creating a new, two dimensional array (Column wise)",
                  "MethodName": "Convert1DArrayInto2DArrayColumnWise"
                }
              ]
            },
            {
              "Description": "Find two integers, in a given array, that are equal to a given sum",
              "Solutions": [
                {
                  "Description": "Using a double loop, and conditional checks",
                  "MethodName": "FindTwoIntegersInArrayThatEqualToAGivenSum"
                },
                {
                  "Description": "Using a temporary Dictionary, singular loop and LINQ functionality",
                  "MethodName": "FindTwoIntegersInArrayThatEqualToAGivenSumUsingLINQ"
                }
              ]
            },
            {
              "Description": "Move all zeros to the end of the array",
              "Solutions": [
                {
                  "Description": "Using two loops, and temporary variable to hold last position of non-zero variable",
                  "MethodName": "MoveZerosToEndOfArray"
                },
                {
                  "Description": "Using LINQ to re-order the array in descending manner",
                  "MethodName": "MoveZerosToEndOfArrayUsingLINQ"
                }
              ]
            },
            {
              "Description": "Find the majority (Occurence of >50%) element in a given array",
              "Solutions": [
                {
                  "Description": "Using an occurence dictionary for each element",
                  "MethodName": "FindMajorityElementInAnArray"
                },
                {
                  "Description": "Using LINQ functionalities to re-order the array and find the majority element",
                  "MethodName": "FindMajorityElementInAnArrayUsingLINQ"
                }
              ]
            },
            {
              "Description": "Find and display Farey sequence to a given order",
              "Solutions": [
                {
                  "Description": "Using a dictionary, remainder operators and Math library functionalities",
                  "MethodName": "FindFareySequenceToAGivenOrder"
                }
              ]
            },
            {
              "Description": "Solve the sun lounger problem (Find number of free seats, whilst leaving one empty seat on either side of each visitor)",
              "Solutions": [
                {
                  "Description": "Using a singular loop and multiple condition statement.",
                  "MethodName": "SunLoungerProblem"
                }
              ]
            },
            {
              "Description": "Solve whether a given Sudoku puzzle grid has a valid solution",
              "Solutions": [
                {
                  "Description": "Using multiple loops to gather all possible subsets of elements, and validating them until (if) invalid is found",
                  "MethodName": "IsSudokuSolutionValid"
                }
              ]
            },
            {
              "Description": "Determine whether a given array of positive integers, contains a full position cycle",
              "Solutions": [
                {
                  "Description": "Using a while loop, to iterate over the input array and check multiple break conditions",
                  "MethodName": "DoesArrayContainFullPositionCycle"
                }
              ]
            },
            {
              "Description": "Find the length of the longest sub-sequence of two distinct numbers whose difference is 1",
              "Solutions": [
                {
                  "Description": "Form a list of sequence lengths while iterating over the array.",
                  "MethodName": "AlmostUniformSequence"
                }
              ]
            },
            {
              "Description": "Solve and display 'Popping Blocks' exercise",
              "Solutions": [
                {
                  "Description": "Utilizing for and while loops, nullifying matching elements and reinstantiating the list until no contiguous matching elements are left",
                  "MethodName": "PoppingBlocks"
                }
              ]
            },
            {
              "Description": "Solve 'Josephus Problem' and display the index (safe position) of last survivor",
              "Solutions": [
                {
                  "Description": "Using a single for loop, and 'executing' the element, when counter is equivalent to kill index",
                  "MethodName": "TheJosephusProblem"
                }
              ]
            },
            {
              "Description": "Find the Fulcrum position element in a given array",
              "Solutions": [
                {
                  "Description": "Using a single for loop, and LINQ Take and TakeLast functions",
                  "MethodName": "FindFulcrumPosition"
                }
              ]
            },
            {
              "Description": "Find the sum of missing numbers in a given array",
              "Solutions": [
                {
                  "Description": "Using a for to sum all elements inclusively, and a for each loop to add inverted values of input array elements.",
                  "MethodName": "FindSumOfMissingNumbers"
                },
                {
                  "Description": "Utilizing a HashSet to store elements that shouldn't be summed, and using a single for loop to sum elements that do not exist in the HashSet.",
                  "MethodName": "FindSumOfMissingNumbersUsingHashSet"
                }
              ]
            },
            {
              "Description": "Determine whether array elements share at least one digit with neighboring elements",
              "Solutions": [
                {
                  "Description": "Utilizing a single for loop and LINQ functions",
                  "MethodName": "ArrayElementsShareDigits"
                }
              ]
            },
            {
              "Description": "Determine whether a given 'Broken Bridge' can be fixed and used",
              "Solutions": [
                {
                  "Description": "Traverse the length of the Broken Bridge, account for all holes, and determine whether the bridge can be fixed up to a usable degree",
                  "MethodName": "FixTheBrokenBridge"
                }
              ]
            },
            {
              "Description": "Apply rules of '2048' tile game to a given array of integers",
              "Solutions": [
                {
                  "Description": "Utilize multiple for loops and variety of LINQ functions",
                  "MethodName": "TileGame2048"
                }
              ]
            }
          ]
        },
        // Category - Data Structures
        {
          "Name": "datastructures",
          "Exercises": [
            {
              "Description": "Reverse a Linked List",
              "Solutions": [
                {
                  "Description": "Using a loop and creating a new, reversed linked list",
                  "MethodName": "ReverseALinkedList"
                }
              ]
            },
            {
              "Description": "Find LinkedListNode in a LinkedList",
              "Solutions": [
                {
                  "Description": "Utilizing LinkedList's function Find that returns a LinkedListNode with a given value",
                  "MethodName": "FindNodeInLinkedList"
                }
              ]
            },
            {
              "Description": "Merge two Linked Lists (using LINQ)",
              "Solutions": [
                {
                  "Description": "Utilizing LINQ's Concat and OrderBy functions",
                  "MethodName": "MergeTwoLinkedListsUsingLINQ"
                }
              ]
            },
            {
              "Description": "Remove duplicate node elements from a given Linked List",
              "Solutions": [
                {
                  "Description": "Utilizing a separate HashSet to temporarily store unique elements of linked list",
                  "MethodName": "RemoveDuplicatesFromLinkedListUsingHashSet"
                },
                {
                  "Description": "Forming a new Linked List and utilizing LINQ Contains function to add only unique nodes",
                  "MethodName": "RemoveDuplicatesFromLinkedListUsingLINQ"
                }
              ]
            },
            {
              "Description": "Reverse a given Stack collection",
              "Solutions": [
                {
                  "Description": "Forming a new Stack collection from input Stack",
                  "MethodName": "ReverseAStack"
                }
              ]
            }
          ]
        },
        // Category - Project Euler
        {
          "Name": "euler",
          "Exercises": [
            {
              "Description": "Find the sum of all the multiples of 3 or 5 below 1000",
              "Solutions": [
                {
                  "Description": "Utilizing a single for loop and remainder operator to find fitting numbers",
                  "MethodName": "MultiplesOf3And5"
                },
                {
                  "Description": "Using LINQ's functions Range, Where and Sum",
                  "MethodName": "MultiplesOf3And5UsingLINQ"
                }
              ]
            },
            {
              "Description": "Find the sum of even-valued Fibonacci sequence elements, whose values do not exceed four million",
              "Solutions": [
                {
                  "Description": "Forming an integer type list with valid Fibonacci sequence elements, and then summing up their values using LINQ",
                  "MethodName": "EvenFibonacciNumbers"
                }
              ]
            },
            {
              "Description": "Find the largest prime factor of the number 600851475143",
              "Solutions": [
                {
                  "Description": "Reduce the number of potential factors by utilizing LINQ and Math library functions, iterate over potential variable and find the largest prime factor",
                  "MethodName": "LargestPrimeFactor"
                }
              ]
            },
            {
              "Description": "Find the largest palindrome made from the product of two 3-digit numbers",
              "Solutions": [
                {
                  "Description": "Utilizing two for loops, LINQ SequenceEquals and Reverse functions",
                  "MethodName": "LargestPalindromeProduct"
                },
                {
                  "Description": "Forming a LINQ Query to get all palindromes of three digit number multiplication, and then retrieving highest valued palindrome",
                  "MethodName": "LargestPalindromeProductUsingLINQ"
                }
              ]
            },
            {
              "Description": "Find the smallest positive number that is evenly divisible by all of the numbers from 1 to 20",
              "Solutions": [
                {
                  "Description": "Using a while and a for loop, iterating in increases of 20, and breaking out of loops when solution is found",
                  "MethodName": "SmallestMultiple"
                }
              ]
            },
            {
              "Description": "Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum",
              "Solutions": [
                {
                  "Description": "Using a single for loop, Math Pow function and a few temporary variables",
                  "MethodName": "SumSquareDifference"
                }
              ]
            },
            {
              "Description": "Find the value of 10001st prime number",
              "Solutions": [
                {
                  "Description": "Using a single while loop, and re-utilizing 'CheckIfNumberIsPrime' function from 'Numbers' category",
                  "MethodName": "Get10001stPrime"
                }
              ]
            },
            {
              "Description": "Find the thirteen adjacent digits in the 1000-digit number that have the greatest product",
              "Solutions": [
                {
                  "Description": "Utilizing temporary variables, a nested for and for each loops, as well as LINQ functions",
                  "MethodName": "LargestProductInASeries"
                }
              ]
            },
            {
              "Description": "Find a product of Pythagorean triplet for which the sum of three numbers is equal to 1000",
              "Solutions": [
                {
                  "Description": "Establishing equations that our solution must follow, utilizing two while loops, temporary variables and calculating the solution",
                  "MethodName": "SpecialPythagoreanTriplet"
                }
              ]
            },
            {
              "Description": "Find the sum of all the primes below two million",
              "Solutions": [
                {
                  "Description": "Implementing a simplified version of 'Sieve of Eratosthenes' algorithm, using a few for loops and summing up remaining primes by process of elimination",
                  "MethodName": "SummationOfPrimes"
                }
              ]
            },
            {
              "Description": "Find greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in the 20×20 grid",
              "Solutions": [
                {
                  "Description": "Utilizing multiple for loops, list to hold sub sections of adjacent elements and LINQ's functions",
                  "MethodName": "LargestProductInAGrid"
                }
              ]
            },
            {
              "Description": "Find the value of the first triangle number to have over five hundred divisors",
              "Solutions": [
                {
                  "Description": "Utilizing while and for loops, multiple temporary variables, Math square root function, as well as re-using solution from 'Numbers' category to check for number primeness",
                  "MethodName": "HighlyDivisibleTriangularNumber"
                }
              ]
            },
            {
              "Description": "Find the first ten digits of the sum of the following one-hundred 50-digit numbers",
              "Solutions": [
                {
                  "Description": "Utilizing LINQ functions for conversion and summing, and String class functions for formatting and sub-stringing",
                  "MethodName": "LargeSum"
                }
              ]
            },
            {
              "Description": "Find which starting number, under one million, produces the longest chain of Collatz sequence",
              "Solutions": [
                {
                  "Description": "Using a for and while loops, calculating length of Collatz's sequence for each element",
                  "MethodName": "LongestCollatzSequence"
                }
              ]
            },
            {
              "Description": "Starting in the top left corner of a 20×20 grid, and only being able to move to the right and down, find how many possible route there are to reach the bottom right corner",
              "Solutions": [
                {
                  "Description": "Providing a detailed mathematical explanation and re-utilizing solution from 'Numbers' category to calculate factorials",
                  "MethodName": "LatticePaths"
                }
              ]
            },
            {
              "Description": "Find the sum of the digits of the number 2^1000",
              "Solutions": [
                {
                  "Description": "Utilizing Math library, LINQ functions and string format specifier",
                  "MethodName": "PowerDigitSum"
                }
              ]
            },
            {
              "Description": "Find how many letters would be used, if all the numbers from 1 to 1000 (one thousand) inclusive were written out in words",
              "Solutions": [
                {
                  "Description": "Use few arrays to define variables, iterate from 1 to 1000, get spelled out variations of words and sum up length of each spelled out number",
                  "MethodName": "NumberLetterCounts"
                }
              ]
            },
            {
              "Description": "By starting at the top of the triangle below and moving to adjacent numbers on the row below, find the maximum total from top to bottom",
              "Solutions": [
                {
                  "Description": "Initializing the provided triangle, and implementing 'bottom up' algorithm",
                  "MethodName": "MaximumPathSumI"
                }
              ]
            },
            {
              "Description": "Find out how many Sundays fell on the first of the month during the twentieth century (1 Jan 1901 to 31 Dec 2000)",
              "Solutions": [
                {
                  "Description": "Iterating from starting date to the end date over each day, and counting ones that fit the condition of the exercise",
                  "MethodName": "CountingSundays"
                }
              ]
            }
          ]
        }
      ]
    },
    "HelpCommandCollection": {
      "HelpCommands": [
        {
          "Name": "help",
          "Description": "Lists available helper commands that can be invoked."
        },
        {
          "Name": "how",
          "Description": "Provides an explanation how to form a command to invoke exercise solution."
        },
        {
          "Name": "list",
          "Description": "Displays a complete list of all categories, with all exercises and their solutions."
        },
        {
          "Name": "quit",
          "Description": "Exits the application."
        },
        {
          "Name": "clear",
          "Description": "Clears the console."
        }
      ]
    }
  }
}